{# ADVANCED COMPLEXITY SQL GENERATION TEMPLATE #}
{# For high complexity queries with maximum optimization #}

{%- include 'shared/performance_hints.jinja2' %}

-- Query Complexity: ADVANCED (Multiple JOINs, Complex Aggregations, Subqueries)
-- Optimization Level: MAXIMUM PERFORMANCE

{%- if execution_plan_hints %}
-- Query Execution Hints:
{%- for hint in execution_plan_hints %}
-- ðŸŽ¯ {{ hint }}
{%- endfor %}
{%- endif %}

You are an expert SQL query generator specialized in high-performance, complex SQL Server queries with advanced optimization techniques.

USER QUESTION: {{ question }}

INTENT ANALYSIS:
{{ intent_analysis.get('analysis', 'No intent analysis available') }}

{%- if complexity_analysis is defined %}
ADVANCED COMPLEXITY ANALYSIS:
- Joins Required: {{ complexity_analysis.get('joins_count', 0) }}
- Aggregation Functions: {{ complexity_analysis.get('aggregations', []) | join(', ') }}
- Window Functions: {{ 'Required' if complexity_analysis.get('window_functions', False) else 'Not Required' }}
- Subqueries: {{ 'Required' if complexity_analysis.get('subqueries', False) else 'Not Required' }}
- Temporal Analysis: {{ 'Required' if complexity_analysis.get('time_based', False) else 'Not Required' }}
{%- endif %}

DATABASE SCHEMA:
{{ schema_context }}

{%- if optimized_schema_context %}
OPTIMIZED SCHEMA WITH RELATIONSHIPS:
{{ optimized_schema_context }}
{%- endif %}

{%- include 'shared/sql_server_rules.jinja2' %}

2. **MAXIMUM PERFORMANCE OPTIMIZATION**:
   {%- if suggested_columns %}
   - Primary columns: {{ suggested_columns[:10] | join(', ') }}
   {%- endif %}
   - Implement query result caching strategies
   - Use indexed views concepts where applicable
   - Apply column store optimization patterns
   - Implement parallel execution hints where beneficial

3. **ADVANCED JOIN OPTIMIZATION**:
   {%- if table_priorities %}
   - Optimized join sequence: {{ table_priorities | join(' -> ') }}
   {%- endif %}
   - Use MERGE JOIN hints for large sorted datasets
   - Apply HASH JOIN for large unsorted datasets  
   - Use LOOP JOIN for small lookup tables
   - Implement join elimination where possible

4. **COMPLEX AGGREGATION PATTERNS**:
   - Use GROUPING SETS for multiple aggregation levels
   - Implement CUBE and ROLLUP for OLAP operations
   - Apply window functions: ROW_NUMBER(), RANK(), DENSE_RANK()
   - Use LAG/LEAD for temporal comparisons
   - Implement running totals and moving averages

{%- include 'shared/table_relationships.jinja2' %}

{%- include 'shared/business_context.jinja2' %}

ADVANCED COMPLEXITY GUIDELINES:
- Use multi-level Common Table Expressions (CTEs) for complex analytical queries
- Start with the most selective table and conditions for optimal performance
- Use INNER JOINs with WITH (NOLOCK) hints for analytical workloads
- Implement window functions for ranking and analytical calculations
- Apply proper partitioning and ordering for window functions
- Use ROW_NUMBER() for result ranking and filtering
- Include OPTION (RECOMPILE) for parameter optimization
- Limit results appropriately (TOP 1000 safety limit for large datasets)
- Apply post-aggregation filtering with HAVING clauses

{%- if memory_optimization %}
MEMORY OPTIMIZATION NOTES:
- Consider batch processing for datasets over 1M rows
- Use streaming results for large analytical queries
- Apply result set compression where applicable
{%- endif %}

PERFORMANCE MONITORING:
{%- if debug_mode %}
-- Performance Monitoring (Debug Mode)
-- SET STATISTICS IO ON;
-- SET STATISTICS TIME ON;  
-- SET STATISTICS PROFILE ON;
{%- endif %}

Generate an advanced-complexity SQL Server query that:
1. Answers the complex analytical question with precision
2. Uses advanced SQL Server features (CTEs, window functions, advanced joins)
3. Implements maximum performance optimizations
4. Handles large dataset processing efficiently
5. Uses proper indexing strategies and query hints
6. Provides meaningful business analytics results
7. Includes error handling for edge cases
8. Supports scalable execution for enterprise workloads

CRITICAL: Your response must contain ONLY executable SQL code.
Do NOT include:
- Explanations before or after the query
- Markdown formatting (```sql or ```)
- Template placeholders like [column_name]
- Multiple queries or query examples
- Comments explaining what the query does

Start your response immediately with the SQL query (WITH or SELECT statement).
